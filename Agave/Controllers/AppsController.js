/** *AgavePlatformScienceAPILib * * This file was automatically generated by APIMATIC BETA v2.0 on 10/07/2015 */'use strict';angular.module('AgavePlatformScienceAPILib').factory('AppsController', function ($q, Configuration, HttpClient, APIHelper) {    return {        /**        * @param {bool} available                   Whether the app is available. Boolean, default true        * @param {bool} checkpointable              Whether the app is checkpointable        * @param {string|null} checksum                    The checksum of the public app deployment assets.        * @param {string|null} created                     The timestamp when the app was first registered. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as 'yesterday' or '3 days ago'.        * @param {string|null} defaultmaxruntime           The max run time for job requests utilizing this app.        * @param {string|null} defaultmemorypernode        The default memory request for job requests utilizing this app.        * @param {string|null} defaultnodes                The default number of nodes requested for job requests utilizing this app.        * @param {string|null} defaultprocessorspernode    The default processors per node request for job requests utilizing this app.        * @param {string|null} defaultqueue                The default executionSystem queue for job requests utilizing this app.        * @param {string|null} deploymentpath              The deployment path on the storageSystem where the app assets reside.        * @param {string|null} executionsystem             The id of the system where the app will run.        * @param {string|null} executiontype               The execution type of the app. One of HPC, CLI, CONDOR.        * @param {string|null} helpuri                     The URL to the help documentation for this app.        * @param {string|null} icon                        The icon associated with this app.        * @param {string|null} id                          The unique id of the app defined by <name>-<version>        * @param {string|null} inputs.id                   The id of one or more input definitions for the app        * @param {string|null} label                       The display label for the app.        * @param {string|null} lastupdated                 The timestamp of the last time the app was updated. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as 'yesterday' or '3 days ago'.        * @param {string|null} longdescription             The full description of the app.        * @param {string|null} modules                     The list of modules used by this app. Do not use equality operators with this search term.        * @param {string|null} name                        The name of the app        * @param {string|null} ontology                    The list of ontological terms used by this app. Do not use equality operators with this search term.        * @param {string|null} outputs.id                  The id of one or more output definitions for the app        * @param {string|null} owner                       The owner of the app.        * @param {string|null} parallelism                 The parallelism type of the app: One of PARALLEL, PTHREAD, SERIAL        * @param {string|null} parameters.id               The id of one or more parameter definitions for the app        * @param {string|null} parameters.type             The type of one or more parameter definitions for the app        * @param {string|null} public                      Whether the app is publicly available for use.          * @param {string|null} publiconly                  Restricts to only public apps. Present for legacy support. This is equivalent to public=true          * @param {string|null} privateonly                 Restricts to only private apps. Present for legacy support. This is equivalent to public=false        * @param {string|null} revision                    The revision count of the app. This is the number of times the app definition has been udpated.        * @param {string|null} shortdescription            The short description of the app.        * @param {string|null} storagesystem               The id of the system where the app assets reside.        * @param {string|null} tags                        The list of ontological terms used by this app. Do not use equality operators with this search term.        * @param {string|null} templatepath                The path of the wrapper template file relative to the app's deploymentPath.        * @param {string|null} testpath                    The path of the test wrapper template relative to the app's deploymentPath.        * @param {string|null} uuid                        The uuid of the app.        * @param {string|null} version                     The version of the app        * @param {bool|null} limit                          Optional parameter: Boolean flag indicating whether or not to show app. Defaults to false.        * @param {bool|null} offset                         Optional parameter: Boolean flag indicating whether or not to show app. Defaults to false.        * @return {promise<array>}        */        searchApps: function(          available,          checkpointable,          checksum,          created,          defaultmaxruntime,          defaultmemorypernode,          defaultnodes,          defaultprocessorspernode,          defaultqueue,          deploymentpath,          executionsystem,          executiontype,          helpuri,          icon,          id,          inputsId,          label,          lastupdated,          limit,          longdescription,          modules,          name,          offset,          ontology,          outputsId,          owner,          parallelism,          parametersId,          parametersType,          publicOnly,          revision,          shortdescription,          storagesystem,          tags,          templatepath,          testpath,          uuid,          version        ){          //prepare query string for API call          var baseUri = Configuration.BASEURI          var queryBuilder = baseUri + "/apps/v2/";          name = name === '' ? null : name;          //Process query parameters          queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {              "available": available,              "checkpointable": checkpointable,              "checksum": checksum,              "created": created,              "defaultmaxruntime": defaultmaxruntime,              "defaultmemorypernode": defaultmemorypernode,              "defaultnodes": defaultnodes,              "defaultprocessorspernode": defaultprocessorspernode,              "defaultqueue": defaultqueue,              "deploymentpath": deploymentpath,              "executionsystem": executionsystem,              "executiontype": executiontype,              "helpuri": helpuri,              "icon": icon,              "id": id,              "inputs.id": inputsId,              "label": label,              "lastupdated": lastupdated,              "limit": limit,              "longdescription": longdescription,              "modules": modules,              "name": name,              "offset": offset,              "ontology": ontology,              "outputs.id": outputsId,              "owner": owner,              "parallelism": parallelism,              "parameters.id": parametersId,              "parameters.type": parametersType,              "public": publicOnly,              "revision": revision,              "shortdescription": shortdescription,              "storagesystem": storagesystem,              "tags": tags,              "templatepath": templatepath,              "testpath": testpath,              "uuid": uuid,              "version": version          });          //validate and preprocess url          var queryUrl = APIHelper.cleanUrl(queryBuilder);          //prepare headers          var headers = {              "accept": "application/json",              "Authorization": "Bearer " + Configuration.oAuthAccessToken          };          //prepare and invoke the API call request to fetch the response          var config = {              method: "GET",              queryUrl: queryUrl,              headers: headers,          };          var response = HttpClient(config);          //Create promise to return          var deferred = $q.defer();          //process response          response.then(function (result) {              deferred.resolve(result.body);          }, function (result) {              deferred.reject(APIHelper.appendContext({                  errorMessage: "HTTP Response Not OK",                  errorCode: result.code,                  errorResponse: result.message              }, result.getContext()));          });          return deferred.promise;        },        /**         * Get a list of available applications.         * @param {int|null} limit    Optional parameter: The maximum number of results returned from this query         * @param {int|null} offset    Optional parameter: The number of results skipped in the result set returned from this query         * @param {Dictionary} queryParameters    Optional parameter: Additional optional query parameters are supported by this endpoint         *         * @return {promise<array>}         */        listApps: function (limit, offset, queryParameters) {            //Assign default values            limit = limit || 100;            offset = offset || 0;            queryParameters = queryParameters || null;            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/";            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                // "naked": true,                "limit": (null != limit) ? limit : 100,                "offset": (null != offset) ? offset : 0            });            //append optional parameters to the query            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, queryParameters)            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: "GET",                queryUrl: queryUrl,                headers: headers,                cache: true            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Register and update new applications.         * @param {Application|null} body    Optional parameter: The description of the app to add or update.         *         * @return {promise<Application>}         */        addApp: function (body) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/";            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "content-type": "application/json; charset=utf-8",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: "POST",                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get details of an application by it's unique id.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         *         * @return {promise<Application>}         */        getAppDetails: function (appId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: "GET",                queryUrl: queryUrl,                headers: headers,            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Update an application.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         * @param {Application} body    Required parameter: The description of the app to add or update.         *         * @return {promise<Application>}         */        updateApp: function (appId, body) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "content-type": "application/json; charset=utf-8",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: "POST",                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Edit an application.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         * @param {ApplicationAction} body    Required parameter: The operation to perform.         *         * @return {promise<Application>}         */        updateInvokeAppAction: function (appId, body) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "content-type": "application/json; charset=utf-8",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: "PUT",                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Deletes an application.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         *         * @return {promise<void>}         */        deleteApp: function (appId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: "DELETE",                queryUrl: queryUrl,                headers: headers,            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Grant a user permission for an application.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         * @param {PermissionModel} body    Required parameter: The permission add or update.         *         * @return {promise<PermissionModel>}         */        addAppPermission: function (appId, body) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}/pems";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "content-type": "application/json; charset=utf-8",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: "POST",                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Deletes all permissions on an application.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         *         * @return {promise<void>}         */        deleteClearAppPermissions: function (appId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}/pems";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: "DELETE",                queryUrl: queryUrl,                headers: headers,            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get a specific user's permissions for an application.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         * @param {string} username    Required parameter: The username of the api user associated with the permission.         *         * @return {promise<PermissionModel>}         */        getAppPermission: function (appId, username) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}/pems/{username}";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId,                "username": username            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: "GET",                queryUrl: queryUrl,                headers: headers,            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Add or update a user's permission for an application.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         * @param {PermissionModel} body    Required parameter: The permission add or update.         * @param {string} username    Required parameter: The username of the api user associated with the permission         *         * @return {promise<PermissionModel>}         */        updateAppPermission: function (appId, body, username) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}/pems/{username}";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId,                "username": username            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "content-type": "application/json; charset=utf-8",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: "POST",                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Deletes all permissions for the given user on an application.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         * @param {string} username    Required parameter: The username of the api user associated with the permission         *         * @return {promise<void>}         */        deleteAppPermission: function (appId, username) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}/pems/{username}";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId,                "username": username            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: "DELETE",                queryUrl: queryUrl,                headers: headers,            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get a submission form for the named application.         * @param {string} appId    Required parameter: The app for which to create the form         *         * @return {promise<string>}         */        getAppSubmissionForm: function (appId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}/form";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     "naked": true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: "GET",                queryUrl: queryUrl,                headers: headers,            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get the permission for this application.         * @param {string} appId    Required parameter: The id of the application. The application id is made up of the name and version separated by a dash.         * @param {int|null} limit    Optional parameter: The maximum number of results returned from this query         * @param {int|null} offset    Optional parameter: The number of results skipped in the result set returned from this query         *         * @return {promise<array>}         */        listAppPermissions: function (appId, limit, offset) {            //Assign default values            limit = limit || 100;            offset = offset || 0;            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}/pems";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId            });            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                // "naked": true,                "limit": (null != limit) ? limit : 100,                "offset": (null != offset) ? offset : 0            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: "GET",                queryUrl: queryUrl,                headers: headers,            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * List the event history of this app         * @param {string} appId    Required parameter: The id of the app for which the history will be returned         * @param {string|null} created    Optional parameter: The date the event occurred         * @param {int|null} limit    Optional parameter: The maximum number of results returned from this query         * @param {int|null} offset    Optional parameter: The number of results skipped in the result set returned from this query         * @param {string|null} status    Optional parameter: The event status         *         * @return {promise<HistoryEvent>}         */        listAppHistory: function (appId, created, limit, offset, status) {            //Assign default values            limit = limit || 100;            offset = offset || 0;            //prepare query string for API call            var baseUri = Configuration.BASEURI            var queryBuilder = baseUri + "/apps/v2/{appId}/history";            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                "appId": appId            });            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                // "naked": true,                "created": created,                "limit": (null != limit) ? limit : 100,                "offset": (null != offset) ? offset : 0,                "status": status            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                "accept": "application/json",                "Authorization": "Bearer " + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: "GET",                queryUrl: queryUrl,                headers: headers,            };            var response = HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: "HTTP Response Not OK",                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        }    }});